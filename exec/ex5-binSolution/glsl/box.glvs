#version 150 

uniform bool position_is_center;
uniform bool has_rotations;
uniform bool has_translations;

in vec4 position;
in vec3 extent;
in vec4 color;
in int group_index;
in vec4 rotation;
in vec3 translation;

out mat3 NM;
out mat4 PM;
out vec4 color_gs;

//***** begin interface of quaternion.glsl ***********************************
vec4 unit_quaternion();
vec3 rotate_vector_with_quaternion(in vec3 preimage, in vec4 q);
vec3 inverse_rotate_vector_with_quaternion(in vec3 v, in vec4 q);
void quaternion_to_axes(in vec4 q, out vec3 x, out vec3 y, out vec3 z);
void quaternion_to_matrix(in vec4 q, out mat3 M);
void rigid_to_matrix(in vec4 q, in vec3 t, out mat4 M);
//***** end interface of quaternion.glsl ***********************************

//***** begin interface of group.glsl ***********************************
vec4 group_color(in vec4 color, int group_index);
vec3 group_transformed_position(in vec3 position, int group_index);
vec3 group_transformed_normal(in vec3 nml, int group_index);
void right_multiply_group_normal_matrix(inout mat3 NM, int group_index);
void right_multiply_group_position_matrix(inout mat4 PM, int group_index);
void right_multiply_group_normal_matrix_and_rotation(inout mat3 NM, int group_index, vec4 rotation);
void right_multiply_group_position_matrix_and_rigid(inout mat4 PM, int group_index, vec4 rotation, vec3 translation);
//***** end interface of group.glsl ***********************************

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

void main()
{
	// compute normal transformation matrix
	NM = get_normal_matrix();
	if (has_rotations) {
		right_multiply_group_normal_matrix_and_rotation(NM, group_index, rotation);
	}
	else {
		right_multiply_group_normal_matrix(NM, group_index);
	}
	// compute position transformation matrix

	// compute box transformation
	mat4 BM = mat4(0.0);
	if (position_is_center) {
		BM[0][0] = extent[0];
		BM[1][1] = extent[1];
		BM[2][2] = extent[2];
		BM[3] = position;
	}
	else {
		vec3 E = extent - position.xyz;
		vec3 C = 0.5*(position.xyz + extent);
		BM[0][0] = E[0];
		BM[1][1] = E[1];
		BM[2][2] = E[2];
		BM[3] = vec4(C, 1.0);
	}

	PM = get_modelview_matrix();

	if (has_rotations || has_translations) {
		vec4 q = unit_quaternion();
		if (has_rotations)
			q = rotation;
		vec3 t = vec3(0.0);
		if (has_translations)
			t = translation;
		right_multiply_group_position_matrix_and_rigid(PM, group_index, q, t);
	}
	else {
		right_multiply_group_position_matrix(PM, group_index);
	}
	
	PM = PM * BM;

	color_gs = group_color(color, group_index);
	gl_Position = position;
}